name: Backend CI
# To Trigger changes for CI
on:
  push:
    branches: [ pristine-working-point ]
  pull_request:
    branches: [ pristine-working-point ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      CI: true
      SERVER_PORT: 8080
      SERVER_HOST: localhost
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: testuser
      DB_PASSWORD: testpass
      DB_NAME: testdb
      DB_SSL_MODE: disable
      TEST_DB_PASSWORD: testpass
      TEST_JWT_SECRET: test-jwt-secret
      # Add Redis environment variables to satisfy code requirements
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_PASSWORD: testpass
      TEST_REDIS_PASSWORD: testpass
      LLM_API_KEY: ${{ secrets.LLM_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: go build -v ./...

      - name: Run tests
        run: |
          cd backend
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go tool cover -func=coverage.txt

      - name: Store test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage.txt
            test-artifacts/

      - name: Clear caches
        if: always()
        run: |
          go clean -cache -modcache -i -r
          docker system prune -f

      - name: Print environment for debugging
        if: failure()
        run: |
          echo "=== Environment Variables ==="
          env | sort
          echo "=== Go Version ==="
          go version
          echo "=== Go Modules ==="
          go list -m all
          echo "=== Docker Info ==="
          docker info

      - name: Clear golangci-lint cache
        run: |
          rm -rf ~/.cache/golangci-lint
          rm -rf ~/.cache/go-build
          rm -rf ~/go/pkg

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        continue-on-error: true
        with:
          version: latest
          args: --config=.golangci.yml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.txt
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
