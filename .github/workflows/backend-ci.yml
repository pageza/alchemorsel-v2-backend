name: Backend CI
# To Trigger changes for CI
on:
  push:
    branches: [ pristine-working-point ]
  pull_request:
    branches: [ pristine-working-point ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      CI: true
      SERVER_PORT: 8080
      SERVER_HOST: localhost
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: testuser
      DB_PASSWORD: testpass
      DB_NAME: testdb
      DB_SSL_MODE: disable
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      TEST_DB_PASSWORD: testpass
      TEST_JWT_SECRET: test-jwt-secret
      TEST_REDIS_PASSWORD: test-redis-pass
      TEST_REDIS_URL: redis://localhost:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Verify database connection
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U testuser -d testdb; then
              echo "PostgreSQL is ready!"
              # Verify database credentials
              PGPASSWORD=testpass psql -h localhost -p 5432 -U testuser -d testdb -c "SELECT 1" || exit 1
              # Verify pgvector extension
              PGPASSWORD=testpass psql -h localhost -p 5432 -U testuser -d testdb -c "CREATE EXTENSION IF NOT EXISTS vector;" || exit 1
              # Verify vector type
              PGPASSWORD=testpass psql -h localhost -p 5432 -U testuser -d testdb -c "SELECT EXISTS(SELECT 1 FROM pg_type WHERE typname = 'vector');" | grep -q t || exit 1
              exit 0
            fi
            echo "Waiting for PostgreSQL... attempt $i"
            sleep 2
          done
          echo "PostgreSQL failed to start"
          exit 1

      - name: Run critical tests first
        env:
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
        run: |
          go test -v -race ./internal/testhelpers/... -run "TestDatabaseConnection|TestMainRouter|TestEnvLoading"
          if [ $? -ne 0 ]; then
            echo "Critical tests failed"
            exit 1
          fi

      - name: Run all tests with coverage
        env:
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below required threshold (85%)"
            exit 1
          fi
          go tool cover -func=coverage.out

      - name: Store test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage.out
            test-artifacts/

      - name: Clear caches
        if: always()
        run: |
          go clean -cache -modcache -i -r
          docker system prune -f

      - name: Print environment for debugging
        run: env | sort

      - name: Clear golangci-lint cache
        run: |
          rm -rf ~/.cache/golangci-lint
          rm -rf ~/.cache/go-build
          rm -rf ~/go/pkg

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        continue-on-error: true
        with:
          version: latest
          args: --config=.golangci.yml
