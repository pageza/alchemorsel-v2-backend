

services:
  frontend:
    build: 
      context: ../alchemorsel-v2-frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - alchemorsel-network

  backend:
    build: .
    ports:
      - "8080:8080"
    secrets:
      - db_password
      - jwt_secret
      - redis_password
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_NAME=alchemorsel
      - DB_SSL_MODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - alchemorsel-network

  postgres:
    image: pgvector/pgvector:pg15
    environment:
      - POSTGRES_DB=alchemorsel
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - alchemorsel-network

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass $(cat /run/secrets/redis_password)
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - alchemorsel-network

secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  redis_password:
    file: ./secrets/redis_password.txt

volumes:
  postgres_data:
  redis_data:

networks:
  alchemorsel-network:
    driver: bridge
